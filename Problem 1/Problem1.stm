;--------------------------------------------------------------
; Problem1.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 ;------------------------------------------------------------
;    2 ; Dr. Art Hanna
;    3 ; SPL Programming, Problem #1
;    4 ; Problem1.spl
;    5 ;------------------------------------------------------------
;    6 PROGRAM
;    7    VAR i: INT.
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;    8    VAR n: INT.
;    9    VAR l: INT.
;   10    VAR u: INT.
;   11    
;   12    INPUT "n? " n.
;   13 	PRINT "\n".
; **** INPUT statement (  12)
                       PUSHA     SB:0D32
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D29
;   14 
;   15 ;------------------------
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement (  13)
;   16 ; CCTQ 1
;   17 ;------------------------
;   18 	FOR i := 1 TO n
                       PUSHA     SB:0D37
                       SVC       #SVC_WRITE_STRING
; **** FOR statement (  18)
                       PUSHA     SB:0D28
;   19 		PRINT "Lauren Escobedo ascending FOR loop", ENDL.
                       PUSH      #0D1
                       POP       @SP:0D1
                       PUSH      SB:0D29
                       PUSH      #0D1
                       SETNZPI   
                       JMPNZ     D0020
                       PUSH      #0D19
                       PUSH      #0D2
                       JMP       HANDLERUNTIMEERROR
D0020                  SETNZPI   
                       JMPN      L0030
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPLE     C0040
                       JMP       E0050
L0030                  SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPGE     C0040
                       JMP       E0050
C0040                  EQU       *
; **** PRINT statement (  19)
;   20 	END 
                       PUSHA     SB:0D41
                       SVC       #SVC_WRITE_STRING
;   21 	PRINT "\n".
                       SVC       #SVC_WRITE_ENDL
;   22 
;   23 ;------------------------
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       ADDI      
                       POP       @SP:0D3
                       JMP       D0020
E0050                  DISCARD   #0D3
; **** PRINT statement (  21)
;   24 ; CCTQ 2
;   25 ;------------------------
;   26 	FOR i := n TO 1 BY -1
                       PUSHA     SB:0D77
                       SVC       #SVC_WRITE_STRING
; **** FOR statement (  26)
                       PUSHA     SB:0D28
                       PUSH      SB:0D29
                       POP       @SP:0D1
;   27 		PRINT "Lauren Escobedo descending FOR loop", ENDL.
                       PUSH      #0D1
                       PUSH      #0D1
                       NEGI      
                       SETNZPI   
                       JMPNZ     D0060
                       PUSH      #0D27
                       PUSH      #0D2
                       JMP       HANDLERUNTIMEERROR
D0060                  SETNZPI   
                       JMPN      L0070
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPLE     C0080
                       JMP       E0090
L0070                  SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPGE     C0080
                       JMP       E0090
C0080                  EQU       *
; **** PRINT statement (  27)
;   28 	END
                       PUSHA     SB:0D81
                       SVC       #SVC_WRITE_STRING
;   29    PRINT "\n".
                       SVC       #SVC_WRITE_ENDL
;   30 
;   31 ;------------------------
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       ADDI      
                       POP       @SP:0D3
                       JMP       D0060
E0090                  DISCARD   #0D3
; **** PRINT statement (  29)
;   32 ; CCTQ 3
;   33 ;------------------------
;   34 	i := 1.
                       PUSHA     SB:0D118
                       SVC       #SVC_WRITE_STRING
;   35 	DO
; **** assignment statement (  34)
                       PUSHA     SB:0D28
;   36 		PRINT "Lauren Escobedo DOWHILE loop", ENDL.
                       PUSH      #0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** DO-WHILE statement (  35)
D0100                  EQU       *
; **** PRINT statement (  36)
;   37 	WHILE (i < n-1)
                       PUSHA     SB:0D122
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      SB:0D28
;   38 		PRINT "Lauren Escobedo DOWHILE loop", ENDL.
                       PUSH      SB:0D29
                       PUSH      #0D1
                       SUBI      
                       CMPI      
                       JMPL      T0120
                       PUSH      #0X0000
                       JMP       E0130
T0120                  PUSH      #0XFFFF
E0130                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     E0110
; **** PRINT statement (  38)
;   39 		i := i + 1.
                       PUSHA     SB:0D152
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  39)
                       PUSHA     SB:0D28
;   40 	END
                       PUSH      SB:0D28
;   41    PRINT "\n".
                       PUSH      #0D1
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   42 
;   43 ;------------------------
                       JMP       D0100
E0110                  EQU       *
; **** PRINT statement (  41)
;   44 ; CCTQ 4
;   45 ;------------------------
;   46 	INPUT "Lower bound? " l.
                       PUSHA     SB:0D182
                       SVC       #SVC_WRITE_STRING
;   47 	INPUT "Upper bound? " u.
; **** INPUT statement (  46)
                       PUSHA     SB:0D186
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D30
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
;   48    PRINT "\n".
; **** INPUT statement (  47)
                       PUSHA     SB:0D201
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D31
;   49 
;   50 	FOR i := l TO u BY 1
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement (  48)
                       PUSHA     SB:0D216
                       SVC       #SVC_WRITE_STRING
; **** FOR statement (  50)
                       PUSHA     SB:0D28
                       PUSH      SB:0D30
;   51 		IF ((3*(i+1))%2 = 0) THEN
                       POP       @SP:0D1
                       PUSH      SB:0D31
                       PUSH      #0D1
                       SETNZPI   
                       JMPNZ     D0140
                       PUSH      #0D51
                       PUSH      #0D2
                       JMP       HANDLERUNTIMEERROR
D0140                  SETNZPI   
                       JMPN      L0150
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPLE     C0160
                       JMP       E0170
L0150                  SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPGE     C0160
                       JMP       E0170
C0160                  EQU       *
; **** IF statement (  51)
                       PUSH      #0D3
                       PUSH      SB:0D28
                       PUSH      #0D1
                       ADDI      
                       MULI      
                       PUSH      #0D2
                       REMI      
;   52 			PRINT " - E", i, ENDL.
                       PUSH      #0D0
                       CMPI      
                       JMPE      T0180
                       PUSH      #0X0000
                       JMP       E0190
T0180                  PUSH      #0XFFFF
E0190                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0210
; **** PRINT statement (  52)
                       PUSHA     SB:0D220
                       SVC       #SVC_WRITE_STRING
;   53 		ELSE 
                       PUSH      SB:0D28
                       SVC       #SVC_WRITE_INTEGER
;   54 			PRINT " - O", i, ENDL.
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0210                  EQU       *
; **** PRINT statement (  54)
                       PUSHA     SB:0D226
                       SVC       #SVC_WRITE_STRING
;   55 		END
                       PUSH      SB:0D28
                       SVC       #SVC_WRITE_INTEGER
;   56 	END
                       SVC       #SVC_WRITE_ENDL
;   57 	   PRINT "\n".
;   58 
;   59 ;------------------------
E0200                  EQU       *
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       ADDI      
                       POP       @SP:0D3
                       JMP       D0140
E0170                  DISCARD   #0D3
; **** PRINT statement (  57)
;   60 ; CCTQ 5
;   61 ;------------------------
;   62 	PRINT "1".
                       PUSHA     SB:0D232
                       SVC       #SVC_WRITE_STRING
;   63 	FOR i := 2 TO n BY 1
; **** PRINT statement (  62)
                       PUSHA     SB:0D236
                       SVC       #SVC_WRITE_STRING
; **** FOR statement (  63)
                       PUSHA     SB:0D28
                       PUSH      #0D2
;   64 		PRINT ", ", i.
                       POP       @SP:0D1
                       PUSH      SB:0D29
                       PUSH      #0D1
                       SETNZPI   
                       JMPNZ     D0220
                       PUSH      #0D64
                       PUSH      #0D2
                       JMP       HANDLERUNTIMEERROR
D0220                  SETNZPI   
                       JMPN      L0230
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPLE     C0240
                       JMP       E0250
L0230                  SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       SWAP      
                       CMPI      
                       JMPGE     C0240
                       JMP       E0250
C0240                  EQU       *
; **** PRINT statement (  64)
;   65 	END
                       PUSHA     SB:0D239
                       SVC       #SVC_WRITE_STRING
;   66 	PRINT ".", ENDL.
                       PUSH      SB:0D28
                       SVC       #SVC_WRITE_INTEGER
                       SWAP      
                       MAKEDUP   
                       PUSH      @SP:0D3
                       ADDI      
                       POP       @SP:0D3
                       JMP       D0220
E0250                  DISCARD   #0D3
; **** PRINT statement (  66)
;   67    PRINT "\n".
                       PUSHA     SB:0D243
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
;   68 
;   69 END
; **** PRINT statement (  67)
;   70 
                       PUSHA     SB:0D246
                       SVC       #SVC_WRITE_STRING
                       RETURN    
; **** =========
; **** END (  69)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D250
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D268
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       RW        0D1                  ; i
                       RW        0D1                  ; n
                       RW        0D1                  ; l
                       RW        0D1                  ; u
                       DS        "n? "
                       DS        "\n"
                       DS        "Lauren Escobedo ascending FOR loop"
                       DS        "\n"
                       DS        "Lauren Escobedo descending FOR loop"
                       DS        "\n"
                       DS        "Lauren Escobedo DOWHILE loop"
                       DS        "Lauren Escobedo DOWHILE loop"
                       DS        "\n"
                       DS        "Lower bound? "
                       DS        "Upper bound? "
                       DS        "\n"
                       DS        " - E"
                       DS        " - O"
                       DS        "\n"
                       DS        "1"
                       DS        ", "
                       DS        "."
                       DS        "\n"
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future SPL syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
